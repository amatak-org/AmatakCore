#!/usr/bin/env node

const oclif = require('@oclif/core')

oclif.run().then(require('@oclif/core/flush')).catch(require('@oclif/core/handle'))


import {Command, Flags} from '@oclif/core'

export class amatak extends Command {
  static summary = 'A brief overview of your command.'
  static description = `
An in-depth description of the command.
It can be multiline.
`

  // hide the command from help
  static hidden = false

  // custom usage string for help
  // this overrides the default usage
  static usage = 'amatak --myflag'

  // examples to add to help
  // <%= config.bin %> resolves to the executable name
  // <%= command.id %> resolves to the command name
  static examples = [
    // Examples can be simple strings
    '<%= config.bin %> <%= command.id %> --help',
    // Or objects that provide a description of the example command
    {
      description: 'Force the command to execute',
      command: '<%= config.bin %> <%= command.id %> --force',
    }
  ]

  // this makes the parser not fail when it receives invalid arguments
  // defaults to true
  // set it to false if you need to accept a variable number of arguments
  static strict = false

  // define aliases that can execute this command.
  static aliases = ['alternate:name:for:this:command']

  // Set to true if you want to add the --json flag to your command.
  // oclif will automatically suppress logs (if you use this.log, this.warn, or this.error) and
  // display the JSON returned by the command's run method.
  static enableJsonFlag = true

  async run() {
    // show a warning
    this.warn('uh oh!')
    // exit with an error message
    this.error('uh oh!!!')
    // exit with status code
    this.exit(1)
  }
}
